//unit Model.Connection;
//
//interface
//
//uses
//  FireDAC.Comp.Client, FireDAC.Stan.Intf, FireDAC.Stan.Option,FireDAC.Stan.Def,
//  FireDAC.Stan.Pool, FireDAC.Phys.Intf, FireDAC.Phys.FB, FireDAC.Phys.FBDef,
//  FireDAC.UI.Intf, FireDAC.VCLUI.Wait, System.IniFiles, System.SysUtils,
//  System.Classes;
//
//var
//    FConexao : TFDConnection;
//
//  function fMontaConexao(FConexao: TFDConnection): String;
//  function fConectar: TFDConnection;
//  procedure pDesconectar;
//
//implementation
//
//function fMontaConexao(FConexao: TFDConnection): string;
//var
//  wArquivoConfig : string;
//  wIni : TIniFile;
//begin
//  try
//    try
//
//      // aqui acessa o arquivo de config la na pasta debug pra configuar o banco
//
//      wArquivoConfig := GetCurrentDir + '\ServerHorse.ini';
//
//      wIni := TIniFile.Create(wArquivoConfig);
//
//      FConexao.Params.Values['DriverID'] := wIni.ReadString('Banco de Dados', 'DriverID', '');
//      FConexao.Params.Values['Database'] := wIni.ReadString('Banco de Dados', 'Database', '');
//      FConexao.Params.Values['User_name'] := wIni.ReadString('Banco de Dados', 'User_name', '');
//      FConexao.Params.Values['Password'] := wIni.ReadString('Banco de Dados', 'Password', '');
//      FConexao.Params.Add('Port=' + wIni.ReadString('Banco de Dados', 'Port', '3050'));
//      FConexao.Params.Add('Server=' + wIni.ReadString('Banco de Dados', 'Server', 'localhost'));
//
//      Result := 'OK';
//    except on Ex:exception do
//      Result := 'Erro ao configurar banco: ' + Ex.Message;
//    end;
//
//  finally
//    if Assigned(wIni) then
//      wIni.DisposeOf;
//  end;
//end;
//
//function fConectar: TFDConnection;
//begin
//  FConexao := TFDConnection.Create(nil);
//  fMontaConexao(FConexao);
//  FConexao.Connected := True;
//
//  Result := FConexao;
//end;
//
//procedure pDesconectar;
//begin
//  if Assigned(FConexao) then
//    begin
//      if FConexao.Connected then
//        FConexao.Connected := False;
//
//      FConexao.Free;
//    end;
//end;
//
//
//end.

unit Model.Connection;

interface

uses
  FireDAC.DApt, FireDAC.Stan.Option, FireDAC.Stan.Intf, FireDAC.UI.Intf,
  FireDAC.Stan.Error, FireDAC.Phys.Intf, FireDAC.Stan.Def, FireDAC.Stan.Pool,
  FireDAC.Stan.Async, FireDAC.Phys, FireDAC.Phys.SQLite, FireDAC.Phys.SQLiteDef,
  FireDAC.Stan.ExprFuncs, FireDAC.FMXUI.Wait, Data.DB, FireDAC.Comp.Client,

  FireDAC.Phys.FB, FireDAC.Phys.FBDef, System.Classes,

  System.IniFiles, System.SysUtils;

var
    FConnection : TFDConnection;

function SetupConnection(FConn: TFDConnection): String;
function Connect : TFDConnection;
procedure Disconect;

implementation

function SetupConnection(FConn: TFDConnection): string;
var
    arq_ini : string;
    ini : TIniFile;
begin
    try
        try
            arq_ini := GetCurrentDir + '\ServerHorse.ini';

            // Verifica se INI existe...
            if NOT FileExists(arq_ini) then
            begin
                Result := 'Arquivo INI não encontrado: ' + arq_ini;
                exit;
            end;

            // Instanciar arquivo INI...
            ini := TIniFile.Create(arq_ini);

            // Buscar dados do arquivo fisico...
            FConn.Params.Values['DriverID'] := ini.ReadString('Banco de Dados', 'DriverID', '');
            FConn.Params.Values['Database'] := ini.ReadString('Banco de Dados', 'Database', '');
            FConn.Params.Values['User_name'] := ini.ReadString('Banco de Dados', 'User_name', '');
            FConn.Params.Values['Password'] := ini.ReadString('Banco de Dados', 'Password', '');
            FConn.Params.Add('Port=' + ini.ReadString('Banco de Dados', 'Port', '3050'));
            FConn.Params.Add('Server=' + ini.ReadString('Banco de Dados', 'Server', 'localhost'));

            Result := 'OK';
        except on ex:exception do
            Result := 'Erro ao configurar banco: ' + ex.Message;
        end;

    finally
        if Assigned(ini) then
            ini.DisposeOf;
    end;
end;

function Connect : TFDConnection;
begin
    FConnection := TFDConnection.Create(nil);
    SetupConnection(FConnection);
    FConnection.Connected := True;

    Result := FConnection;
end;

procedure Disconect;
begin
    if Assigned(FConnection) then
    begin
        if FConnection.Connected then
            FConnection.Connected := false;

        FConnection.Free;
    end;

end;


end.

